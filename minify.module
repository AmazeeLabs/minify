<?php

/**
 * Implements hook_help().
 */
function minify_help($path, $arg) {
  switch ($path) {
    case 'admin/config/development/performance/minifyjs':
      $output = '<p>' . t('This is a simple module that provides the mechanism to minify JavaScript files, ');
      $output .= t('which ultimatly reduces the file size and load time.') . '</p>';
      $output .= '<p>' . t('In <b>Operations</b> column,<br /><b>Minify</b> stands for, Generate the minified version,<br />');
      $output .= t('<b>Re-minify</b> stands for, Re-generate the minified version,<br />');
      $output .= t('<b>Revert</b> stands for, Revert the changes and use the original file.') . '</p>';
    return $output;
  }
}

/**
 * Implements hook_menu()
 */
function minify_menu() {
  $items['admin/config/development/performance/default'] = array(
    'title' => 'Performance',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => 1,
  );
  $items['admin/config/development/performance/minifyjs'] = array(
    'title' => 'Minify JavaScript files',
    'access arguments' => array('administer minify'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('minify_js_callback'),
    'type' => MENU_LOCAL_TASK,
    'weight' => 2,
    'file' => 'minify.admin.inc',
  );
  $items['admin/config/development/performance/minifyjs/revert'] = array(
    'title' => 'Revert Minify JS',
    'access arguments' => array('administer minify'),
    'page callback' => '_minify_js_revert_callback',
    'file' => 'minify.admin.inc',
  );
  $items['admin/config/development/performance/minifyjs/refresh'] = array(
    'title' => 'Minify JS',
    'access arguments' => array('administer minify'),
    'page callback' => '_minify_js_refresh_callback',
    'file' => 'minify.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_permission()
 */
function minify_permission() {
  return array(
    'administer minify' => array(
      'title' => t('Administer minify'),
      'description' => t('Perform administration tasks for minify module.'),
    ),
  );
}

/**
 * Implements hook_FORM_ID_alter().
 *
 * @param type $form
 * @param type $form_state
 */
function minify_form_system_performance_settings_alter(&$form, &$form_state, $form_id) {
  if(user_access('administer minify')) {
    $m_cnt = 0;
    $cache = variable_get('minify_captured_js', null);
    $status_flag = true;
    $description = t('Select <b>Minify JavaScript file</b> tab at top of the page or ')
      . l('Click here', 'admin/config/development/performance/minifyjs')
      . t(' to generate and manage minified JavaScript files. <br />This option is avaliable only if when minified JavaScript files are exist.');
    foreach($cache as $key => $value) {
      if($cache[$key]['status']) {
        $status_flag = false;
        $m_cnt++;
      }
    }
    
    if(!$status_flag) {
      $cnt = count($cache);
      $description = t('Select <b>Minify JavaScript files</b> tab at top of the page or ')
        . l('Click here', 'admin/config/development/performance/minifyjs')
        . t(' to manage minified JavaScript files.')
        . t('<br />Out of <b>@cnt</b> only <b>@m_cnt</b> JavaScript files are minified.', array('@cnt' => $cnt, '@m_cnt' => $m_cnt));
    }

    $form['bandwidth_optimization']['minify_html'] = array(
      '#type' => 'checkbox',
      '#title' => t('Minify HTML.'),
      '#default_value' => variable_get('minify_html', FALSE),
    );
    $form['bandwidth_optimization']['minify_js'] = array(
      '#type' => 'checkbox',
      '#title' => t('Use Minified JavaScript files.'),
      '#disabled' => $status_flag,
      '#description' => $description,
      '#default_value' => variable_get('minify_js', FALSE),
    );
  }
}

/**
 * Implements hook_process_html()
 */
function minify_process_html(&$variables) {
  if(variable_get('minify_html', FALSE)) {
    /* Get active theme regions */
    $visible_theme_region = system_region_list(variable_get('theme_default', ''), REGIONS_ALL);
    /* Add page region to array */
    $visible_theme_region = array_merge(array('page' => 'Page'), $visible_theme_region);
    /* Prase and check if region is exist then minify HTML */
    foreach($visible_theme_region as $key => $value) {
      if( isset($variables[$key]) ) {
        $variables[$key] = _minify_html($variables[$key]);
      }
    }
  }
}

/**
 * Helper function to minify HTML
 */
function _minify_html($buffer) {
  $search = array(
        '/\>[^\S ]+/s',     // strip whitespaces after tags, except space
        '/[^\S ]+\</s',     // strip whitespaces before tags, except space
        '/(\s)+/s',         // shorten multiple whitespace sequences
        '/^\\s+|\\s+$/m',   // trim each line
    );
    $replace = array(
        '>',
        '<',
        '\\1',
        '',
    );
  $buffer = preg_replace($search, $replace, $buffer);
  $buffer = preg_replace_callback('/<!--([\\s\\S]*?)-->/', '_minify_remove_html_comment', $buffer);
  return $buffer;
}

/**
 * Remove HTML comments (not containing IE conditional comments).
 */
function _minify_remove_html_comment($string) {
  return (0 === strpos($string[1], '[') || false !== strpos($string[1], '<!['))
    ? $string[0]
    : '';
}

/**
 * Implements hook_js_alter().
 */
function minify_js_alter(&$scripts) {

  $cache_data = array();

  if ($cache = variable_get('minify_captured_js', null)) {
    $cache_data = $cache;
  }

  $updated = false;
  foreach ($scripts as $key => $value) {
    /* Set JavaScript entry into cache array if it not exist in cache */
    if( !is_array($scripts[$key]['data']) && !_minify_javascript_exist($scripts[$key]['data'], $cache_data) ) {
      $updated = true;
      $cache_data[$scripts[$key]['data']]['file_path'] = $scripts[$key]['data'];
      $cache_data[$scripts[$key]['data']]['file_name'] = drupal_basename($scripts[$key]['data']);
      $cache_data[$scripts[$key]['data']]['minified_file_path'] = '';
      $cache_data[$scripts[$key]['data']]['original_size'] = 0;
      $cache_data[$scripts[$key]['data']]['minified_size'] = 0;
      $cache_data[$scripts[$key]['data']]['status'] = false;
    }
  }

  /* If any change in existing array update cache */
  if($updated) {
    variable_set('minify_captured_js', $cache_data);
  }

  if(variable_get('minify_js', FALSE)) {
    /* Replace the JavaScript path by minified path into $scripts without changing the order */
    foreach ($cache_data as $key => $value) {
      if(isset($scripts[$key]) && $value['status']) {
        $scripts[$key]['data'] = $value['minified_file_path'];
        $scripts = _minify_replace_array_key($scripts, $key, $value['minified_file_path']);
      }
    }
  }

}

/*
 * Helper function to check wheather JavaScript entry is exist into given array
 *
 * @param $search_value
 *  JavaScript file name to search into array
 *
 * @param $array
 *  File array to search JavaScript 
 */
function _minify_javascript_exist($search_value, $array) {  
  $flag = false;
  foreach($array as $key => $value) {
    if(in_array($search_value, $value, true)) {
      $flag = true;
      break;
    }
  }
  return $flag;
}

/*
 * Helper function to change array key, without changing its order
 */
function _minify_replace_array_key($array, $old_key, $new_key) {
  $keys = array_keys($array);
  $index = array_search($old_key, $keys);
  if ($index !== false) {
    $keys[$index] = $new_key;
    $array = array_combine($keys, $array);
  }
  return $array;
}

